// Generated by CoffeeScript 1.6.3
(function() {
  var dir, dumpObj, include, space, type;

  window.REPL = (function() {
    var repl;

    repl = null;

    function REPL() {
      var _this = this;
      if (repl != null) {
        return repl;
      }
      repl = this;
      this.run = false;
      this.env = {
        log: function(str) {
          _this.printbuffer += str + "\n";
          return void 0;
        },
        clear: function() {
          _this.printbuffer = _this.printlog = "";
          return void 0;
        },
        dir: dir,
        type: type,
        grep: null,
        include: include,
        $_: void 0
      };
      this.history = [];
      this.help = ".exit / Exit the REPL\n.help / Show repl options\n.hist 1 / last input\n\nword[space][OK] / autocomplete \n\nlog(str)\nclear()\ndir(obj [, maxCallNum])\ntype(obj)\ninclude(url)\n$_";
      this.printbuffer = "";
      this.printlog = "";
      this.defaultInput = "";
    }

    REPL.prototype.start = function() {
      this.run = true;
      return this.loop();
    };

    REPL.prototype.exit = function() {
      this.run = false;
      return void 0;
    };

    REPL.prototype.loop = function() {
      var _this = this;
      this.print(this["eval"](this.read()));
      if (this.run) {
        setTimeout(function() {
          return _this.loop();
        });
      }
      return void 0;
    };

    REPL.prototype.read = function() {
      var input;
      input = prompt("coffee> \n" + this.printlog, this.defaultInput);
      if (input === null) {
        input = ".exit";
      }
      this.defaultInput = "";
      this.history.unshift(input);
      return input;
    };

    REPL.prototype["eval"] = function(code) {
      var err, keys, vals,
        _this = this;
      if (/\.exit$/.test(code)) {
        return this.exit();
      } else if (/\.help$/.test(code)) {
        return this.help;
      } else if (/\.hist (\d*)$/.test(code)) {
        return this.defaultInput = this.history[/\.history (\d*)$/.exec(code)[1]];
      } else if (/\s$/.test(code)) {
        return this.autocomplete(code);
      } else {
        keys = Object.keys(this.env);
        vals = keys.map(function(key) {
          return _this.env[key];
        });
        try {
          return this.env.$_ = Function.apply(null, keys.concat(CoffeeScript.compile("return do->" + code.split("\n").join("\n  "), {
            bare: true
          }))).apply(window, vals);
        } catch (_error) {
          err = _error;
          return "" + err;
        }
      }
    };

    REPL.prototype.print = function(result) {
      if (result != null) {
        this.printlog = "coffee> " + this.history[0] + "\n" + this.printbuffer + result + "\n" + this.printlog;
        this.printbuffer = "";
      }
      this.printlog = this.printlog.split("\n").splice(0, 50).join("\n");
      return void 0;
    };

    REPL.prototype.propose = function(code) {
      var a, ary, b, tmp, _ary;
      a = this["eval"]("Object.getOwnPropertyNames(" + code + ")");
      b = this["eval"]("(key for key of " + code + ")");
      if (type(a) !== "array" || type(b) !== "array") {
        return [];
      }
      ary = [].concat(a, b);
      tmp = {};
      _ary = ary.filter(function(key) {
        if (tmp[key] != null) {
          return false;
        } else {
          return tmp[key] = true;
        }
      });
      return _ary.sort();
    };

    REPL.prototype.autocomplete = function(code) {
      var proposals, reg, results;
      if (results = /([A-Za-z0-9_$]+)\s$/.exec(code)) {
        reg = new RegExp("^" + results[1] + ".*");
        proposals = this.propose("this").filter(function(key) {
          return reg.test(key);
        });
        if (proposals.length === 1) {
          this.defaultInput = proposals[0];
          this.history.shift();
          return null;
        } else {
          this.defaultInput = code.substr(0, code.length - 1);
          return proposals.join("\n");
        }
      } else if (results = /([A-Za-z0-9_$.]+)\.\s$/.exec(code)) {
        proposals = this.propose(results[1]);
        if (proposals.length === 1) {
          this.defaultInput = proposals[0];
          this.history.shift();
          return null;
        } else {
          this.defaultInput = code.substr(0, code.length - 1);
          return proposals.join("\n");
        }
      } else if (results = /([A-Za-z0-9_$.]+)\.([A-Za-z0-9_$]+)\s$/.exec(code)) {
        reg = new RegExp("^" + results[2] + ".*");
        proposals = this.propose(results[1]).filter(function(key) {
          return reg.test(key);
        });
        if (proposals.length === 1) {
          this.defaultInput = results[1] + "." + proposals[0];
          this.history.shift();
          return null;
        } else {
          this.defaultInput = code.substr(0, code.length - 1);
          return proposals.join("\n");
        }
      } else {
        return null;
      }
    };

    return REPL;

  })();

  include = function(url, next) {
    var script;
    script = document.createElement("script");
    script.src = url;
    script.onload = next;
    document.body.appendChild(script);
    return void 0;
  };

  dir = function(o, max, i) {
    var v;
    if (max == null) {
      max = 1;
    }
    if (i == null) {
      i = 0;
    }
    if (i >= max) {
      return Object.prototype.toString.apply(o);
    }
    switch (type(o)) {
      case "null":
      case "undefined":
      case "boolean":
      case "number":
      case "string":
        return "" + o;
      case "function":
        return ("" + o).split("\n").join("").substr(0, 20) + " ... " + "}";
      case "date":
        return JSON.stringify(o);
      case "array":
        return "[" + (((function() {
          var _i, _len, _results;
          _results = [];
          for (_i = 0, _len = o.length; _i < _len; _i++) {
            v = o[_i];
            _results.push(dir(v, max, i + 1));
          }
          return _results;
        })()).join(", ")) + "]";
      case "object":
        return dumpObj(o, max, i);
      default:
        return dumpObj(o, max, i);
    }
  };

  dumpObj = function(o, max, i) {
    var k, v;
    if (Object.keys(o).length === 0) {
      return "{}";
    } else {
      return "{\n" + (((function() {
        var _results;
        _results = [];
        for (k in o) {
          v = o[k];
          _results.push("" + (space(i + 1)) + k + ": " + (dir(v, max, i + 1)));
        }
        return _results;
      })()).join(",\n")) + "\n" + (space(i)) + "}";
    }
  };

  type = function(o) {
    var str;
    if (typeof o !== "object") {
      return typeof o;
    } else {
      str = Object.prototype.toString.apply(o).split(" ")[1];
      return str.substr(0, str.length - 1).toLowerCase();
    }
  };

  space = function(i) {
    var _i, _results;
    return (function() {
      _results = [];
      for (var _i = 0; 0 <= i ? _i <= i : _i >= i; 0 <= i ? _i++ : _i--){ _results.push(_i); }
      return _results;
    }).apply(this).map(function() {
      return "";
    }).join("  ");
  };

  if (typeof CoffeeScript === "undefined" || CoffeeScript === null) {
    include("http://coffeescript.org/extras/coffee-script.js", function() {
      return (new REPL).start();
    });
  } else {
    setTimeout(function() {
      return (new REPL).start();
    });
  }

}).call(this);

/*
//@ sourceMappingURL=coffee-repl.map
*/
